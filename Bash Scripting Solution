To solve the problem of implementing the Penguin cipher in Bash, letâ€™s break it down step by step. You already have a script that encrypts and decrypts text using a simple cipher. I will guide you through understanding it and making sure it works as expected.

### Step 1: Understand the Script

The provided script does the following:

1. **Encrypt Function**:
   - Converts each character in the input string to its ASCII value.
   - Adds a clock value (which changes with each character) to the ASCII value.
   - Converts the result back to a string and encodes the entire output as base64.

2. **Decrypt Function**:
   - Decodes the base64 string back to ASCII values.
   - Subtracts the clock value from each ASCII value to retrieve the original characters.

### Step 2: Test the Script

Given the example in the screenshot, the script works as intended. Here is how you can recreate this process and understand each part.

### Step 3: Run the Script

1. **Create the Script**:
   - Copy the script provided and save it to a file, e.g., `penguincipher.sh`.
   - Make the script executable with:
     ```bash
     chmod +x penguincipher.sh
     ```

2. **Encrypt a Message**:
   - Run the script with a message:
     ```bash
     ./penguincipher.sh "The Far Side Gallery returns!"
     ```
   - This will output an encrypted string.

3. **Decrypt the Message**:
   - Run the script with the `--decode` flag:
     ```bash
     ./penguincipher.sh --decode "YourEncryptedStringHere"
     ```
   - Replace `YourEncryptedStringHere` with the actual encrypted string from the previous step.
   - This should output the original message: "The Far Side Gallery returns!"

### Step 4: Walk Through the Script

Here is a breakdown of each section of the script:

1. **Set Clock**:
   - The `setClock` function calculates a clock value that changes with each character based on the length of the message. This ensures that each character is altered differently.

   ```bash
   setClock() {
     MESSAGE_LENGTH="$1"
     CLOCK_INTERVAL=$(echo "$MESSAGE_LENGTH"*4 | bc -l)
     MAX_CLOCK_VALUE=$(echo "$MESSAGE_LENGTH"*25 | bc -l)
     CLOCK_VALUE=$(($CLOCK_INTERVAL + $CLOCK_VALUE))
     if [[ $CLOCK_VALUE -gt $MAX_CLOCK_VALUE ]]; then
       CLOCK_VALUE=$(($CLOCK_VALUE - $MAX_CLOCK_VALUE))
     fi
   }
   ```

2. **Encrypt**:
   - Converts each character into its ASCII code, adds the clock value, and then converts it back to a string.
   - The result is encoded in base64 for easy handling.

   ```bash
   encrypt() {
     TO_ENCRYPT="$1"
     ENCRYPTED_MESSAGE=""
     for (( i=0; i<"${#TO_ENCRYPT}"; i++ )); do
       setClock "${#TO_ENCRYPT}"
       CHAR="${TO_ENCRYPT:$i:1}"
       LC_CTYPE=C BYTE=$(printf "%d" "'$CHAR")
       ENCRYPTED_MESSAGE+="$(($BYTE + $CLOCK_VALUE)) "
     done
     RESULT=$(echo -n "$ENCRYPTED_MESSAGE" | base64 -w 0)
     echo "$RESULT"
   }
   ```

3. **Decrypt**:
   - Reverses the encryption by subtracting the clock value from each ASCII code and converting it back to characters.

   ```bash
   decrypt() {
     TO_DECRYPT=$(echo -n "$1" | base64 --decode)
     DECRYPTED_MESSAGE=""
     for OBFUSCATED_BYTE in $TO_DECRYPT; do
       setClock "$(echo "$TO_DECRYPT" | wc -w)"
       BYTE="$(($OBFUSCATED_BYTE - $CLOCK_VALUE))"
       printf "\x$(printf %x $BYTE)"
     done
   }
   ```

4. **Main Execution**:
   - Checks if the script is being run to encrypt or decrypt based on the `--decode` flag.

   ```bash
   if [[ "$1" == "--decode" ]]; then
     decrypt "$2"
   else
     encrypt "'$1'"
   fi
   ```

### Step 5: Summary of the Process

1. **Create the Script**: Save the provided Bash code to a file.
2. **Make it Executable**: Use `chmod +x` to make it executable.
3. **Encrypt a Message**: Run the script with a message to encrypt.
4. **Decrypt the Message**: Use the `--decode` flag with the encrypted output to retrieve the original message.

This script is a basic example of how to implement a simple cipher in Bash. If you encounter any issues or need further explanation, feel free to ask!
